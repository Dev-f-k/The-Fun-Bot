from pyrogram import Client, filters
from info import START_IMG, LOOK_IMG, COMMAND_HAND_LER, MOVIE_PIC, ADMINS, API_HASH, API_ID, BOT_TOKEN
from script import START_TXT, LOOK_TXT, HELP_TXT, ABOUT_TXT, SOURCE_TXT, MAL_TRAN, HIN_TRAN, LANG, MOVIE_ENG_TXT, MOVIE_MAL_TXT, OWNER_INFO
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import random
import logging
import logging.config
import os
logger = logging.getLogger(__name__)

Client(
    "Pyrogram Bot",
    bot_token=BOT_TOKEN,
    api_id=API_ID,
    api_hash=API_HASH
)

logging.config.fileConfig('logging.conf')
logging.getLogger().setLevel(logging.INFO)
logging.getLogger("pyrogram").setLevel(logging.ERROR)


@Client.on_message(filters.command('logs') & filters.user(ADMINS))
async def log_file(bot, message):
    """Send log file"""
    try:
        await message.reply_document('FunBot.txt')
    except Exception as e:
        await message.reply(str(e))

@Client.on_message(filters.command('logs'))
async def log_user(bot, message):
    await message.reply_text(
        text="This is an Admin command, Not for you!"
)

@Client.on_message(filters.command("start"))
async def start_message(bot, message):
    await message.reply_photo(
            photo=random.choice(START_IMG),
            caption=(START_TXT.format(message.from_user.mention)),
            reply_markup=InlineKeyboardMarkup(
                      [[
                        InlineKeyboardButton('‚ûï ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ûï', url=f'https://t.me/auto_m4_mallumovies_bot?startgroup=true')
                     ],[
                        InlineKeyboardButton('s·¥°…™·¥õ·¥Ñ ú  ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á', callback_data='lang')
                     ],[
                        InlineKeyboardButton('ü§¥ ô·¥è·¥õ ·¥è·¥°…¥·¥á Äü§¥', callback_data="owner_info"),
                        InlineKeyboardButton('üçø·¥ç·¥è·¥†…™·¥á …¢ Ä·¥è·¥ú·¥òüçø', url='https://t.me/filmy_harbour')
                     ],[
                        InlineKeyboardButton('‚ÑπÔ∏è  ú·¥á ü·¥ò', callback_data='help'),
                        InlineKeyboardButton('üòä ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about')
                     ],[
                        InlineKeyboardButton('üí• ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥ç·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü üí•', url='https://t.me/+LJRsBp82HiJhNDhl')
                      ]]
            
            ),
            parse_mode='html'
)

@Client.on_message(filters.regex("movie") | filters.regex("Movie"))
async def filter_handler(bot, message):
    await message.reply_photo(
            photo=(MOVIE_PIC),
            caption=(MOVIE_ENG_TXT.format(message.from_user.mention)),
            reply_markup=InlineKeyboardMarkup(
                      [[
                        InlineKeyboardButton('üáÆüá≥ Translate to Malayalam üáÆüá≥', callback_data='movie_mal_txt')
                      ]]
            
            ),
            parse_mode="html"
)

@Client.on_callback_query()
async def cb_checker(bot, query: CallbackQuery):
        if query.data == "close_data":
            await query.message.delete()

        elif query.data == "start":
            buttons = [[
                        InlineKeyboardButton('‚ûï ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ûï', url=f'https://t.me/auto_m4_mallumovies_bot?startgroup=true')
                     ],[
                        InlineKeyboardButton('s·¥°…™·¥õ·¥Ñ ú  ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á', callback_data='lang')
                     ],[
                        InlineKeyboardButton('ü§¥ ô·¥è·¥õ ·¥è·¥°…¥·¥á Äü§¥', callback_data="owner_info"),
                        InlineKeyboardButton('üçø·¥ç·¥è·¥†…™·¥á …¢ Ä·¥è·¥ú·¥òüçø', url='https://t.me/filmy_harbour')
                     ],[
                        InlineKeyboardButton('‚ÑπÔ∏è  ú·¥á ü·¥ò', callback_data='help'),
                        InlineKeyboardButton('üòä ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about')
                     ],[
                        InlineKeyboardButton('üí• ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥ç·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü üí•', url='https://t.me/+LJRsBp82HiJhNDhl')
                      ]]
            await query.message.edit_text(
                text="‚≠ó ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚¶ø"
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(START_TXT.format(query.from_user.mention)),
                reply_markup=reply_markup,
                parse_mode='html'
            )

        elif query.data == "help":
            buttons = [[
                          InlineKeyboardButton('üè†  ú·¥è·¥ç·¥á', callback_data='start'),
                          InlineKeyboardButton('üòä ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about')
                      ],[
                          InlineKeyboardButton('üîê ·¥Ñ ü·¥ès·¥á', callback_data='close_data'),
                          InlineKeyboardButton('‚ù§Ô∏è s·¥è·¥ú Ä·¥Ñ·¥á', callback_data='sourcehelp')
                      ]]
            await query.message.edit_text(
                text="‚≠ó ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚¶ø"
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(HELP_TXT.format(query.from_user.mention)),
                reply_markup=reply_markup,
                parse_mode='html'
            )

        elif query.data == "about":
            buttons = [[
                          InlineKeyboardButton('üè†  ú·¥è·¥ç·¥á', callback_data='start'),
                          InlineKeyboardButton('‚ÑπÔ∏è  ú·¥á ü·¥ò', callback_data='help')
                      ],[
                          InlineKeyboardButton('üîê ·¥Ñ ü·¥ès·¥á', callback_data='close_data'),
                          InlineKeyboardButton('‚ù§Ô∏è s·¥è·¥ú Ä·¥Ñ·¥á', callback_data='source')
                      ]]
            await query.message.edit_text(
                text="‚≠ó ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚¶ø"
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(ABOUT_TXT.format(query.from_user.mention)),
                reply_markup=reply_markup,
                parse_mode='html'
            )

        elif query.data == "source":
            buttons = [[
                        InlineKeyboardButton('üîô  ô·¥Ä·¥Ñ·¥ã', callback_data='about'),
                        InlineKeyboardButton('üîê ·¥Ñ ü·¥ès·¥á', callback_data='close_data')
                      ]]
            await query.message.edit_text(
                text="‚≠ó ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚¶ø"
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(SOURCE_TXT),
                reply_markup=reply_markup,
                parse_mode='html'
            )

        elif query.data == "sourcehelp":
            buttons = [[
                        InlineKeyboardButton('üîô  ô·¥Ä·¥Ñ·¥ã', callback_data='help'),
                        InlineKeyboardButton('üîê ·¥Ñ ü·¥ès·¥á', callback_data='close_data')
                      ]]
            await query.message.edit_text(
                text="‚≠ó ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚¶ø"
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(SOURCE_TXT),
                reply_markup=reply_markup,
                parse_mode='html'
            )
        elif query.data == "mal_tran":
            buttons = [[
                    InlineKeyboardButton('‚ûï ‡¥é‡¥®‡µç‡¥®‡µÜ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ó‡µç‡¥∞‡µÇ‡¥™‡µç‡¥™‡¥ø‡µΩ ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï ‚ûï', url=f'https://t.me/auto_m4_mallumovies_bot?startgroup=true')
                ],[
                    InlineKeyboardButton('‡¥≠‡¥æ‡¥∑ ‡¥Æ‡¥æ‡¥±‡µÅ‡¥ï', callback_data='lang')
                ],[
                    InlineKeyboardButton('ü§¥‡¥¨‡µã‡¥ü‡µç‡¥ü‡µç ‡¥â‡¥ü‡¥Æü§¥', callback_data="owner_info"),
                    InlineKeyboardButton('üçø‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ‡¥æ ‡¥ó‡µç‡¥∞‡µÇ‡¥™‡µç‡¥™‡µçüçø', url='https://t.me/filmy_harbour')
                ],[
                    InlineKeyboardButton('‚ÑπÔ∏è ‡¥∏‡¥π‡¥æ‡¥Ø‡¥Ç', callback_data='help'),
                    InlineKeyboardButton('üòä ‡¥µ‡¥ø‡¥µ‡¥∞‡¥Ç', callback_data='about')
                ],[
                    InlineKeyboardButton('üí• ‡¥û‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡µç‡¥∞‡¥ß‡¥æ‡¥® ‡¥ö‡¥æ‡¥®‡¥≤‡¥ø‡µΩ ‡¥ö‡µá‡¥∞‡µÅ‡¥ï üí•', url='https://t.me/+LJRsBp82HiJhNDhl')
                  ]]
            await query.message.edit_text(
                text="‚≠ó ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚¶ø"
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(MAL_TRAN.format(query.from_user.mention)),
                reply_markup=reply_markup,
                parse_mode='html'
            )
       
        elif query.data == "hin_tran":
            buttons = [[
                        InlineKeyboardButton('‚ûï ‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§™‡§®‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç ‚ûï', url=f'https://t.me/auto_m4_mallumovies_bot?startgroup=true')
                     ],[
                        InlineKeyboardButton('‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•á‡§Ç', callback_data='lang')
                     ],[
                        InlineKeyboardButton('ü§¥‡§¨‡•â‡§ü ‡§Æ‡§æ‡§≤‡§ø‡§ïü§¥', callback_data="owner_info"),
                        InlineKeyboardButton('üçø‡§´‡§ø‡§≤‡•ç‡§Æ ‡§ó‡•ç‡§∞‡•Å‡§™üçø', url='https://t.me/filmy_harbour')
                     ],[
                        InlineKeyboardButton('‚ÑπÔ∏è ‡§Æ‡§¶‡§¶', callback_data='help'),
                        InlineKeyboardButton('üòä ‡§µ‡§ø‡§µ‡§∞‡§£', callback_data='about')
                     ],[
                        InlineKeyboardButton('üí• ‡§π‡§Æ‡§æ‡§∞‡•á ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç üí•', url='https://t.me/+LJRsBp82HiJhNDhl')
                      ]]
            await query.message.edit_text(
                text="‚≠ó ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚¶ø"
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(HIN_TRAN.format(query.from_user.mention)),
                reply_markup=reply_markup,
                parse_mode='html'
            )
            
        elif query.data == "lang":
            buttons = [[
                        InlineKeyboardButton('English', callback_data='start'),
                        InlineKeyboardButton('‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç', callback_data='mal_tran'),
                        InlineKeyboardButton('‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', callback_data='hin_tran')
                      ]]
            await query.message.edit_text(
                text="‚≠ó ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚≠ó ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚≠ó"
            )
            await query.message.edit_text(
                text="‚¶ø ‚¶ø ‚¶ø"
            )
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(
                text=(LANG),
                reply_markup=reply_markup,
                parse_mode='html'
            )

        elif query.data == "owner_info":
            btn = [[
                    InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã", callback_data="start"),
                    InlineKeyboardButton("·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ", url="t.me/creatorbeatz")
                  ]]
            reply_markup = InlineKeyboardMarkup(btn)
            await query.message.edit_text(
                text=(OWNER_INFO),
                reply_markup=reply_markup,
                parse_mode='html'
            )

        elif query.data == "movie_mal_txt":
            btn = [[
                    InlineKeyboardButton("üá∫üá≤ Translate to English üá∫üá≤", callback_data="movie_eng_txt")
                  ]]
            reply_markup = InlineKeyboardMarkup(btn)
            await query.message.edit_text(
                text=(MOVIE_MAL_TXT.format(query.from_user.mention)),
                reply_markup=reply_markup,
                parse_mode='html'
            )
        elif query.data == "movie_eng_txt":
            btn = [[
                    InlineKeyboardButton("üáÆüá≥ Translate to Malayalam üáÆüá≥", callback_data="movie_mal_txt")
                  ]]
            reply_markup = InlineKeyboardMarkup(btn)
            await query.message.edit_text(
                text=(MOVIE_ENG_TXT.format(query.from_user.mention)),
                reply_markup=reply_markup,
                parse_mode='html'
            )

@Client.on_message(filters.command("howilook"))
async def howilook_message(bot, message):
    await message.reply_photo(
            photo=random.choice(LOOK_IMG),
            caption=(LOOK_TXT.format(message.from_user.first_name)),
            parse_mode='html'
)

# EMOJI CONSTANTS
DICE_E_MOJI = "üé≤"
# EMOJI CONSTANTS


@Client.on_message(
    filters.command(["roll", "dice"], COMMAND_HAND_LER)
)
async def roll_dice(client, message):
    """ @RollaDie """
    rep_mesg_id = message.message_id
    if message.reply_to_message:
        rep_mesg_id = message.reply_to_message.message_id
    await client.send_dice(
        chat_id=message.chat.id,
        emoji=DICE_E_MOJI,
        disable_notification=True,
        reply_to_message_id=rep_mesg_id
    )

# EMOJI CONSTANTS
DART_E_MOJI = "üéØ"
# EMOJI CONSTANTS


@Client.on_message(
    filters.command(["throw", "dart"], COMMAND_HAND_LER)
)
async def throw_dart(client, message):
    """ /throw an @AnimatedDart """
    rep_mesg_id = message.message_id
    if message.reply_to_message:
        rep_mesg_id = message.reply_to_message.message_id
    await client.send_dice(
        chat_id=message.chat.id,
        emoji=DART_E_MOJI,
        disable_notification=True,
        reply_to_message_id=rep_mesg_id
    )

# EMOJI CONSTANTS
GOAL_E_MOJI = "‚öΩ"
# EMOJI CONSTANTS


@Client.on_message(
    filters.command(["goal", "shoot"], COMMAND_HAND_LER)
)
async def roll_dice(client, message):
    """ @Goal """
    rep_mesg_id = message.message_id
    if message.reply_to_message:
        rep_mesg_id = message.reply_to_message.message_id
    await client.send_dice(
        chat_id=message.chat.id,
        emoji=GOAL_E_MOJI,
        disable_notification=True,
        reply_to_message_id=rep_mesg_id
    )

# EMOJI CONSTANTS
PIN_BALL = "üé≥"
# EMOJI CONSTANTS

@Client.on_message(
    filters.command(["pinball", "tenpin"])
)
async def pinball_tenpin(client, message):
    """ /pinball an @animatedpinball """
    rep_mesg_id = message.message_id
    if message.reply_to_message:
        rep_mesg_id = message.reply_to_message.message_id
    await client.send_dice(
        chat_id=message.chat.id,
        emoji=PIN_BALL,
        disable_notification=True,
        reply_to_message_id=rep_mesg_id
    )

# EMOJI CONSTANTS
TRY_YOUR_LUCK = "üé∞"
# EMOJI CONSTANTS

@Client.on_message(
    filters.command(["luck", "cownd"])
)
async def luck_cownd(client, message):
    """ /luck an @animatedluck """
    rep_mesg_id = message.message_id
    if message.reply_to_message:
        rep_mesg_id = message.reply_to_message.message_id
    await client.send_dice(
        chat_id=message.chat.id,
        emoji=TRY_YOUR_LUCK,
        disable_notification=True,
        reply_to_message_id=rep_mesg_id
    )

FUN_STRINGS = (
    "‡¥°‡¥æ ‡¥®‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥í‡¥ï‡µç‡¥ï‡µÜ ‡¥Ö‡¥Æ‡µç‡¥Æ‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥Ç ‡¥™‡µÜ‡¥ô‡µç‡¥ô‡¥ï‡µç‡¥ï‡µÅ‡¥Ç ‡¥â‡¥≥‡µç‡¥≥‡¥§‡µä‡¥ï‡µç‡¥ï‡µÜ ‡¥§‡¥®‡µç‡¥®‡¥æ‡¥ü ‡¥é‡¥≤‡µç‡¥≤‡¥æ‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥Ç ‡¥í‡¥≥‡µç‡¥≥‡¥§‡µç.",
    "‡¥ì.. ‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥∞‡¥Ç... ‡¥™‡¥¥‡µá‡¥™‡µã‡¥≤‡µÜ ‡¥§‡¥®‡µç‡¥®‡µÜ....‡¥í‡¥∞‡µÅ ‡¥Æ‡¥æ‡¥±‡µç‡¥±‡µã‡¥Æ‡¥ø‡¥≤‡µç‡¥≤.....‡¥ö‡µÅ‡¥Æ‡µç‡¥Æ‡¥æ‡¥§‡¥≤‡µç‡¥≤ ‡¥ó‡¥§‡¥ø ‡¥™‡¥ø‡¥ü‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥§‡µç‡¥§‡¥§‡µç....!!!",
    "‡¥Ö‡¥≥‡µç‡¥≥‡¥æ... ‡¥™‡¥ø‡¥≥‡µç‡¥≥‡µá‡¥∞‡µÅ‡¥ü‡µÜ ‡¥ì‡¥∞‡µã... ‡¥™‡µÜ‡¥∑‡¥®‡µÜ...",
    "‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥é‡¥¥‡µÅ‡¥§‡¥æ‡µª ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ ‡¥Ö‡¥±‡¥ø‡¥Ø‡µÇ ‡¥∏‡¥æ‡¥±‡µá.... ‡¥µ‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥Ö‡¥±‡¥ø‡¥Ø‡¥ø‡¥≤‡µç‡¥≤‡¥≤‡µç‡¥≤‡µã....",
    "‡¥á‡¥®‡µç‡¥®‡µç ‡¥á‡¥®‡¥ø ‡¥®‡µÄ ‡¥Æ‡¥ø‡¥£‡µç‡¥ü‡¥∞‡µÅ‡¥§‡µç... ‡¥á‡¥®‡µç‡¥®‡¥§‡µç‡¥§‡µÜ ‡¥ï‡µã‡¥ü‡µç‡¥ü ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡µç.....",
    "‡¥ö‡¥æ‡¥∞‡¥Æ‡¥æ‡¥£‡µÜ‡¥®‡µç‡¥®‡µç ‡¥ï‡¥∞‡µÅ‡¥§‡¥ø ‡¥ö‡µÜ‡¥ï‡¥Ø‡¥æ‡µª ‡¥®‡¥ø‡µΩ‡¥ï‡µç‡¥ï‡¥£‡µç‡¥ü ‡¥ï‡¥®‡µΩ ‡¥ï‡µÜ‡¥ü‡µç‡¥ü‡¥ø‡¥ü‡µç‡¥ü‡¥ø‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥™‡µä‡¥≥‡µç‡¥≥‡µÅ‡¥Ç.",
    "‡¥í‡¥±‡µç‡¥± ‡¥ú‡µÄ‡¥µ‡¥ø‡¥§‡¥Æ‡µá ‡¥â‡¥≥‡µç‡¥≥‡µÅ ‡¥Æ‡¥®‡¥∏‡¥ø‡¥≤‡¥æ‡¥ï‡µç‡¥ï‡¥ø‡¥ï‡µç‡¥ï‡µã, ‡¥∏‡µç‡¥µ‡µº‡¥ó‡µç‡¥ó‡¥Æ‡¥ø‡¥≤‡µç‡¥≤ ‡¥®‡¥∞‡¥ï‡¥Æ‡¥ø‡¥≤‡µç‡¥≤, '‡¥í‡¥±‡µç‡¥± ‡¥ú‡µÄ‡¥µ‡¥ø‡¥§‡¥Ç', ‡¥Ö‡¥§‡µç ‡¥é‡¥µ‡¥ø‡¥ü‡µÜ ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥µ‡µá‡¥£‡¥Æ‡µÜ‡¥®‡µç‡¥®‡µç ‡¥Ö‡¥µ‡¥®‡¥µ‡µª ‡¥§‡µÄ‡¥∞‡µÅ‡¥Æ‡¥æ‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç",
    "‡¥µ‡¥æ‡¥ü‡µç‡¥ü‡µç ‡¥é ‡¥¨‡µã‡¥Ç‡¥¨‡µÜ‡¥∏‡µç‡¥±‡µç‡¥±‡¥ø‡¥ï‡µç ‡¥é‡¥ï‡µç‡¥∏‡µç‡¥™‡µç‡¥≤‡µã‡¥∑‡µª! ‡¥∏‡¥ö‡µç ‡¥é ‡¥ü‡µÜ‡¥±‡¥ø‡¥´‡¥ø‡¥ï‡µç ‡¥°‡¥ø‡¥∏‡µç‡¥ï‡µç‡¥≤‡µã‡¥∏‡µç!!",
    "‡¥ó‡µã ‡¥é‡¥µ‡µá ‡¥∏‡µç‡¥ü‡µÅ‡¥™‡µç‡¥™‡¥ø‡¥°‡µç ‡¥á‡µª ‡¥¶‡¥ø ‡¥π‡µó‡¥∏‡µç ‡¥ì‡¥´‡µç ‡¥Æ‡µà ‡¥µ‡µà‡¥´‡µç‚Äå ‡¥Ü‡µª‡¥°‡µç ‡¥°‡µã‡¥ü‡µç‡¥ü‡µº ‡¥Ø‡µÇ‡¥µ‡¥ø‡µΩ ‡¥®‡µã‡¥ü‡µç‡¥ü‡µç ‡¥∏‡¥ø ‡¥é‡¥®‡¥ø ‡¥Æ‡¥ø‡¥®‡¥ø‡¥±‡µç‡¥±‡µç ‡¥ì‡¥´‡µç ‡¥¶‡¥ø ‡¥ü‡µÅ‡¥°‡µá... ‡¥á‡¥±‡¥ô‡µç‡¥ô‡¥ø ‡¥™‡µã‡¥ü‡¥æ..",
    "‡¥ê ‡¥ï‡¥æ‡µª ‡¥°‡µÅ ‡¥¶‡¥æ‡¥±‡µç‡¥±‡µç‚Äå ‡¥°‡µÅ ‡¥ï‡¥æ‡µª ‡¥ê ‡¥¶‡¥æ‡¥±‡µç‡¥±‡µç‚Äå",
    "‡¥ï‡µç‡¥∞‡µÄ‡¥Ç ‡¥¨‡¥ø‡¥∏‡µç‡¥ï‡¥±‡µç‡¥±‡¥ø‡µΩ ‡¥ï‡µç‡¥∞‡µÄ‡¥Ç ‡¥â‡¥£‡µç‡¥ü‡¥®‡µç‡¥®‡µç ‡¥ï‡¥∞‡µÅ‡¥§‡¥ø ‡¥ü‡µà‡¥ó‡µº ‡¥¨‡¥ø‡¥∏‡µç‡¥ï‡¥±‡µç‡¥±‡¥ø‡µΩ ‡¥ü‡µà‡¥ó‡µº ‡¥â‡¥£‡µç‡¥ü‡¥æ‡¥ï‡¥£‡¥Æ‡µÜ‡¥®‡µç‡¥®‡¥ø‡¥≤‡µç‡¥≤. ‡¥™‡¥£‡¥ø ‡¥™‡¥æ‡¥≥‡µÅ‡¥Ç ‡¥Æ‡µã‡¥®‡µÜ...",
    "‡¥™‡¥ü ‡¥™‡µá‡¥ü‡¥ø‡¥ö‡µç‡¥ö‡µÅ ‡¥™‡¥®‡µç‡¥§‡¥≥‡¥§‡µç‡¥§‡µÅ ‡¥ö‡µÜ‡¥®‡µç‡¥®‡¥™‡µç‡¥™‡µã ‡¥™‡¥®‡µç‡¥§‡µã‡¥Ç ‡¥ï‡µÅ‡¥§‡µç‡¥§‡¥ø ‡¥™‡¥ü ‡¥™‡¥®‡µç‡¥§‡¥≥‡¥§‡µç‡¥§‡µã‡¥ü‡µç‡¥ü‡µÜ‡¥®‡µç‡¥®‡µç ‡¥™‡¥±‡¥û‡µç‡¥û ‡¥™‡µã‡¥≤‡µÜ ‡¥Ü‡¥Ø‡¥≤‡µç‡¥≤‡µã.",
    "‡¥é‡¥®‡µç‡¥±‡µÜ ‡¥ï‡µº‡¥§‡µç‡¥§‡¥æ‡¥µ‡µÜ.... ‡¥é‡¥®‡µç‡¥®‡µÜ ‡¥®‡µÄ ‡¥®‡¥≤‡µç‡¥≤‡¥µ‡¥®‡¥æ‡¥ï‡¥æ‡µª ‡¥∏‡¥Æ‡µç‡¥Æ‡¥§‡¥ø‡¥ï‡µç‡¥ï‡µÇ‡¥≤‡µç‡¥≤ ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ.",
    "‡¥ï‡¥æ‡µº ‡¥é‡µª‡¥ú‡¥ø‡µª ‡¥î‡¥ü‡µç‡¥ü‡µç ‡¥ï‡¥Ç‡¥™‡µç‡¥≤‡µÄ‡¥±‡µç‡¥±‡µç‚Äå‡¥≤‡¥ø......",
    "‡¥§‡¥≥‡µç‡¥≥‡µÜ ‡¥ï‡¥≤‡¥ø‡¥™‡µç‡¥™‡µç ‡¥§‡µÄ‡¥∞‡¥£‡¥ø‡¥≤‡µç‡¥≤‡¥≤‡µç‡¥≤‡µã!!",
    "‡¥™‡¥æ‡¥§‡¥ø‡¥∞‡¥æ‡¥§‡µç‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥®‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥Ö‡¥ö‡µç‡¥õ‡µª ‡¥â‡¥£‡µç‡¥ü‡¥æ‡¥ï‡µç‡¥ï‡¥ø ‡¥µ‡µÜ‡¥ö‡µç‡¥ö‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µã ‡¥™‡µä‡¥±‡µã‡¥ü‡µç‡¥ü‡¥Ø‡µÅ‡¥Ç ‡¥ö‡¥ø‡¥ï‡µç‡¥ï‡¥®‡µÅ‡¥Ç....",
    "‡¥ì ‡¥™‡¥ø‡¥®‡µç‡¥®‡µÜ ‡¥®‡µÄ ‡¥í‡¥ï‡µç‡¥ï‡µÜ ‡¥™‡µç‡¥∞‡µá‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥Ö‡¥§‡µç ‡¥™‡µç‡¥∞‡¥£‡¥Ø‡¥Ç.... ‡¥®‡¥Æ‡µç‡¥Æ‡µæ ‡¥í‡¥ï‡µç‡¥ï‡µÜ ‡¥™‡µç‡¥∞‡µá‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥Ö‡¥§‡µç ‡¥ï‡¥Æ‡µç‡¥™‡¥ø....",
    "‡¥¶‡µà‡¥µ‡¥Æ‡µá ‡¥é‡¥®‡µç‡¥®‡µÜ ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç ‡¥∞‡¥ï‡µç‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡¥£‡µá....",
    "‡¥Ö‡¥µ‡¥≥‡µÜ ‡¥ì‡µº‡¥§‡µç‡¥§‡µç ‡¥ï‡µÅ‡¥ü‡¥ø‡¥ö‡µç‡¥ö ‡¥ï‡¥≥‡µç‡¥≥‡µÅ‡¥Ç ‡¥®‡¥®‡¥û‡µç‡¥û ‡¥Æ‡¥¥‡¥Ø‡µÅ‡¥Ç ‡¥µ‡µá‡¥∏‡µç‡¥±‡µç‡¥±‡µç....",
    "‡¥á‡¥§‡µç‡¥∞‡µá‡¥Ç ‡¥ï‡¥æ‡¥≤‡¥Ç ‡¥é‡¥µ‡¥ø‡¥ü‡µÜ ‡¥Ü‡¥Ø‡¥ø‡¥∞‡µÅ‡¥®‡µç‡¥®‡µÅ....!",
    "‡¥á‡µª‡¥ó‡µç‡¥≤‡µÄ‡¥∑‡µç ‡¥§‡µÄ‡¥∞‡µÜ ‡¥™‡¥ø‡¥ü‡¥ø ‡¥á‡¥≤‡µç‡¥≤ ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ....",
    "‡¥ì‡µæ ‡¥¶‡¥ø ‡¥°‡µç‡¥∞‡µÄ‡¥Ç‡¥∏‡µç‚Äå ‡¥≤‡µà‡¥ï‡µç‚Äå ‡¥ü‡µç‡¥µ‡¥ø‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥∏‡µç‡¥±‡µç‡¥±‡¥æ‡µº‡¥∏‡µç...",
    "‡¥é‡¥®‡µç‡¥±‡µÜ ‡¥™‡µç‡¥∞‡¥æ‡¥®‡µç‡¥§‡µª ‡¥Æ‡µÅ‡¥§‡µç‡¥§‡¥™‡µç‡¥™‡¥æ ‡¥Ö‡¥µ‡¥®‡µÜ ‡¥í‡¥∞‡µÅ ‡¥µ‡¥¥‡¥ø‡¥Ø‡¥æ‡¥ï‡µç‡¥ï‡¥ø ‡¥§‡¥∞‡¥£‡µá",
    "‡¥™‡µÜ‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥ï‡µÜ‡¥ü‡µç‡¥ü‡¥ø‡¥Ø ‡¥∏‡µç‡¥§‡µç‡¥∞‡µÄ‡¥ß‡¥® ‡¥§‡µÅ‡¥ï ‡¥§‡¥∞‡µÅ‡¥Æ‡µã ‡¥Ö‡¥≥‡¥ø‡¥Ø‡¥æ",
    "‡¥®‡µÄ ‡¥µ‡¥≤‡µç‡¥≤‡¥æ‡¥§‡µÜ ‡¥ï‡µç‡¥∑‡µÄ‡¥£‡¥ø‡¥ö‡µç‡¥ö‡µÅ ‡¥™‡µä‡¥Ø‡¥ø",
    "‡¥ï‡¥£‡µç‡¥£‡¥ø‡¥≤‡µÜ‡¥£‡µç‡¥£‡¥Ø‡µä‡¥¥‡¥ø‡¥ö‡µç‡¥ö‡µÅ ‡¥ï‡¥æ‡¥§‡µç‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥µ‡¥æ‡¥Ø‡¥ø‡¥∞‡µÅ‡¥®‡µç‡¥®‡¥≥‡¥ø‡¥Ø‡¥æ.",
    "‡¥ö‡µÜ‡¥≤‡¥ï‡µç‡¥ï‡¥æ‡¥£‡µç‡¥ü‡µç ‡¥é‡¥£‡µÄ‡¥ö‡µç‡¥ö‡µç ‡¥™‡µã‡¥ü‡¥æ ‡¥§‡¥ü‡¥ø‡¥Ø‡¥æ .\
    ‡¥∑‡¥ü‡µç‡¥ü‡µç ‡¥Ø‡µÅ‡¥µ‡µº ‡¥Æ‡µó‡¥§‡µç ‡¥¨‡µç‡¥≤‡¥°‡¥ø ‡¥ó‡µç‡¥∞‡¥æ‡¥Æ‡¥µ‡¥æ‡¥∏‡µÄ‡¥∏‡µç.",
    "‡¥™‡µã‡¥Ø‡¥ø ‡¥ö‡¥æ‡¥µ‡¥ü .\
    ‡¥®‡¥ø‡¥®‡µç‡¥®‡µÜ ‡¥ï‡µä‡¥£‡µç‡¥ü‡µç ‡¥ö‡¥æ‡¥µ‡¥æ‡µª ‡¥™‡¥±‡µç‡¥±‡µÅ‡¥Æ‡µã.",
    "‡¥®‡¥ø‡¥®‡µç‡¥®‡µÜ ‡¥ï‡µä‡¥£‡µç‡¥ü‡µç ‡¥®‡¥æ‡¥ü‡µç‡¥ü‡µÅ‡¥ï‡¥æ‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥Ç ‡¥ó‡µÅ‡¥£‡µã‡¥≤‡µç‡¥≤‡µç‡¥Ø ‡¥µ‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥ï‡¥æ‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥Ç ‡¥ó‡µÅ‡¥£‡µã‡¥≤‡µç‡¥≤‡µç‡¥Ø ‡¥é‡¥®‡µç‡¥§‡¥ø‡¥®‡¥æ ‡¥á‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥®‡¥æ‡¥£‡¥Ç ‡¥ï‡µÜ‡¥ü‡µç‡¥ü‡µç ‡¥ú‡µÄ‡¥µ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µá‡¥ü ‡¥™‡¥ü‡µç ‡¥µ‡¥æ‡¥¥‡µÜ ‡¥ö‡µÜ‡¥ô‡µç‡¥ï‡¥§‡¥≥‡¥ø ‡¥µ‡¥æ‡¥¥ .", 
    "‡¥®‡µÄ ‡¥ö‡¥æ‡¥Ø ‡¥Ö‡¥ü‡¥ø‡¥ö‡µç‡¥ö‡¥æ‡µΩ ‡¥Æ‡¥§‡¥ø ‡¥é‡¥®‡µç‡¥®‡µÜ ‡¥Ö‡¥ü‡¥ø‡¥ï‡µç‡¥ï‡¥£‡µç‡¥ü !",
    "‡¥∏‡µÜ‡µª‡¥∏‡µç ‡¥µ‡µá‡¥£‡¥Ç ‡¥∏‡µÜ‡µª‡¥∏‡¥ø‡¥¨‡¥ø‡¥≤‡¥ø‡¥±‡µç‡¥±‡¥ø ‡¥µ‡µá‡¥£‡¥Ç ‡¥∏‡µÜ‡µª‡¥∏‡¥ø‡¥±‡µç‡¥±‡¥ø‡¥µ‡¥ø‡¥±‡µç‡¥±‡¥ø ‡¥µ‡µá‡¥£‡¥Ç",
    "‡¥®‡µÄ ‡¥™‡µã ‡¥Æ‡µã‡¥®‡µÜ ‡¥¶‡¥ø‡¥®‡µá‡¥∂‡¥æ",
    "‡¥®‡¥ø‡µª‡µç‡¥±‡µÜ ‡¥§‡¥®‡µç‡¥§‡¥Ø‡¥≤‡µç‡¥≤ ‡¥é‡µª‡µç‡¥±‡µÜ ‡¥§‡¥®‡µç‡¥§",
    "‡¥ï‡µÅ‡¥±‡¥ö‡µç‡¥ö‡µç ‡¥ï‡¥û‡µç‡¥û‡¥ø‡¥Ø‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥ü‡µç‡¥ü‡µÜ?",
    "‡¥é‡µª‡µç‡¥±‡µÜ ‡¥™‡¥ø‡¥≥‡µç‡¥≥‡µá‡¥∞‡µÜ ‡¥§‡µä‡¥ü‡µÅ‡¥®‡µç‡¥®‡µã‡¥ü‡¥æ...",
    "‡¥™‡µã‡¥Ø‡¥ø ‡¥ö‡¥§‡µç‡¥§‡µÇ‡¥ü‡µÜ, ‡¥é‡¥®‡µç‡¥§‡¥ø‡¥®‡¥æ ‡¥á‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥≠‡µÇ‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥≠‡¥æ‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥ú‡µÄ‡¥µ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç...",
    "‡¥Ö‡¥§‡¥ø‡¥®‡µç ‡¥®‡µÄ ‡¥è‡¥§‡¥æ?...",
    "‡¥í‡¥®‡µç‡¥®‡µç ‡¥™‡µã‡¥ü‡µÜ‡¥Ø‡µç, ‡¥Ö‡¥µ‡µª fun ‡¥ö‡µã‡¥¶‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥µ‡¥®‡µç‡¥®‡µá‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ...",
    "‡¥á‡¥®‡µç‡¥®‡¥æ ‡¥à bun ‡¥§‡¥ø‡¥®‡µç‡¥®‡µã...",
    "‡¥Ö‡¥ü‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥Æ‡µã‡¥≥‡µÜ!",
    "‡¥µ‡¥ü‡µç‡¥ü‡¥æ‡¥£‡¥≤‡µç‡¥≤‡µÜ?...",
    "‡¥Ö‡¥ô‡µç‡¥ï‡¥Æ‡¥æ‡¥≤‡¥ø‡¥Ø‡¥ø‡¥≤‡µÜ ‡¥Ö‡¥Æ‡µç‡¥Æ‡¥æ‡¥µ‡µª...",
    "‡¥é‡µª‡µç‡¥±‡µÜ ‡¥ó‡µº‡¥≠‡¥Ç ‡¥á‡¥ô‡µç‡¥ô‡¥®‡¥≤‡µç‡¥≤...",
    "‡¥é‡¥®‡µç‡¥§‡¥æ‡¥ü‡µã ‡¥µ‡¥æ‡¥∞‡µç‡¥Ø‡¥∞‡µÜ ‡¥û‡¥æ‡µª ‡¥®‡¥®‡µç‡¥®‡¥æ‡¥µ‡¥æ‡¥§‡µç‡¥§‡µÜ?...",
)


@Client.on_message(
    filters.command("fun", COMMAND_HAND_LER)
)
async def runs(_, message):
    """ /fun strings """
    effective_string = random.choice(FUN_STRINGS)
    if message.reply_to_message:
        await message.reply_to_message.reply_text(effective_string)
    else:
        await message.reply_text(effective_string)

self.run()
